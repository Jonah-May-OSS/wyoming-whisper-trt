# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# GitHub recommends pinning actions to a commit SHA.
# To get a newer version, you will need to update the SHA.
# You can also reference a tag or branch, but the action may change without warning.

name: Publish Docker Images
permissions:
  contents: read
  pull-requests: write

on:
  release:
    types: [published]

jobs:
   build_and_push_images:
    name: Build and Push Docker Images
    runs-on: self-hosted
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
    steps:
      - name: Check out the repo
        uses: actions/checkout@85e6279cec87321a52edac9c87bce653a07cf6c2

      - name: Install Nvidia Drivers
        shell: bash
        run: |
          wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2404/x86_64/cuda-keyring_1.1-1_all.deb
          sudo dpkg -i cuda-keyring_1.1-1_all.deb
          sudo apt-get update
          sudo apt-get install -y nvidia-open
      
      - name: Install CUDA Toolkit
        uses: Jimver/cuda-toolkit@8022558310ea543e35132143092835585f60e628

      - name: Install Docker and Buildx
        shell: bash
        run: |
          # Add Docker's official GPG key:
          sudo apt-get update
          sudo apt-get install ca-certificates curl
          sudo install -m 0755 -d /etc/apt/keyrings
          sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
          sudo chmod a+r /etc/apt/keyrings/docker.asc

          # Add the repository to Apt sources:
          echo \
            "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
            $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
          sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

      - name: Set up QEMU
        uses: docker/setup-qemu-action@4574d27a4764455b42196d70a065bc6853246a25
        with:
          platforms: all

      - name: Install Nvidia Container Toolkit
        shell: bash
        run: |
          curl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey | sudo gpg --dearmor -o /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg \
          && curl -s -L https://nvidia.github.io/libnvidia-container/stable/deb/nvidia-container-toolkit.list | \
            sed 's#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g' | \
            sudo tee /etc/apt/sources.list.d/nvidia-container-toolkit.list
          sudo apt-get update
          sudo apt-get install -y nvidia-container-toolkit
          sudo nvidia-ctk runtime configure --runtime=docker
          sudo systemctl restart docker

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f7ce87c1d6bead3e36075b2ce75da1f6cc28aaca

      - name: Log in to Docker Hub
        uses: docker/login-action@327cd5a69de6c009b9ce71bce8395f28e651bf99
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@8e1d5461f02b7886d3c1a774bfbd873650445aa2
        with:
          images: captnspdr/wyoming-whisper-trt

      - name: Prepare AMD64 Tags
        id: prepare-amd64-tags
        run: |
          TAGS="${{ steps.meta.outputs.tags }}"
          echo "Original AMD64 TAGS: $TAGS"

          # We'll split by space and append '-amd64' to each
          AMD64_TAGS=""
          for T in $TAGS; do
            AMD64_TAGS="${AMD64_TAGS}\n${T}-amd64"
          done

          # Clean up any leading blank line
          AMD64_TAGS="$(echo -e "$AMD64_TAGS" | sed '/^$/d')"

          echo "Final AMD64 tags (multi-line):"
          echo "$AMD64_TAGS"

          # -- The important part --
          # Use the '<<EOF' syntax so GitHub Actions treats the entire block as ONE output variable
          echo "amd64_tags<<EOF" >> $GITHUB_OUTPUT
          echo "$AMD64_TAGS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Prepare ARM64 Tags
        id: prepare-arm64-tags
        shell: bash
        run: |
          TAGS="${{ steps.meta.outputs.tags }}"
          echo "Original ARM64 TAGS: $TAGS"

          ARM64_TAGS=""
          for T in $TAGS; do
            ARM64_TAGS="${ARM64_TAGS}\n${T}-arm64"
          done

          # Remove any blank leading line
          ARM64_TAGS="$(echo -e "$ARM64_TAGS" | sed '/^$/d')"

          echo "Final ARM64 tags (multi-line):"
          echo "$ARM64_TAGS"

          # Use the here-doc style to create a multi-line output
          echo "arm64_tags<<EOF" >> $GITHUB_OUTPUT
          echo "$ARM64_TAGS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Prepare iGPU Tags
        id: prepare-igpu-tags
        shell: bash
        run: |
          TAGS="${{ steps.meta.outputs.tags }}"
          echo "Original iGPU TAGS: $TAGS"

          IGPU_TAGS=""
          for T in $TAGS; do
            IGPU_TAGS="${IGPU_TAGS}\n${T}-igpu"
          done

          IGPU_TAGS="$(echo -e "$IGPU_TAGS" | sed '/^$/d')"

          echo "Final iGPU tags (multi-line):"
          echo "$IGPU_TAGS"

          # Use here-doc for multi-line output
          echo "igpu_tags<<EOF" >> $GITHUB_OUTPUT
          echo "$IGPU_TAGS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Build and Push AMD64 dGPU Image
        id: push-amd64
        uses: docker/build-push-action@b16f42f92abaeb7610fd7fc99ab230d13e79e275
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.prepare-amd64-tags.outputs.amd64_tags }}
          labels: ${{ steps.meta.outputs.labels }}-amd64
          platforms: linux/amd64

      - name: Build and Push ARM64 dGPU Image
        id: push-arm64
        uses: docker/build-push-action@b16f42f92abaeb7610fd7fc99ab230d13e79e275
        with:
          context: .
          file: ./Dockerfile.arm64
          push: true
          tags: ${{ steps.prepare-arm64-tags.outputs.arm64_tags }}
          labels: ${{ steps.meta.outputs.labels }}-arm64
          platforms: linux/arm64

      - name: Build and Push ARM64 iGPU Image
        id: push-arm64-igpu
        uses: docker/build-push-action@b16f42f92abaeb7610fd7fc99ab230d13e79e275
        with:
          context: .
          file: ./Dockerfile.igpu
          push: true
          tags: ${{ steps.prepare-igpu-tags.outputs.igpu_tags }}
          labels: ${{ steps.meta.outputs.labels }}-igpu
          platforms: linux/arm64
