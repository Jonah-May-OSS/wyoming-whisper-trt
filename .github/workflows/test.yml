name: Test Whisper TRT ASR Server
permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '.github/**'
      - '.vscode/**'
      - 'examples/**'
      - 'tests/**'
      - '**/*.md'

jobs:
  test_linux:
    name: "Build and Test on Linux (self-hosted runner)"
    runs-on: self-hosted
    steps:
      # 1. Checkout the repository code
      - name: Checkout Code
        uses: actions/checkout@09d2acae674a48949e3602304ab46fd20ae0c42f
        with:
          submodules: recursive

      # 2. Install GCC and G++
      - name: Install GCC and G++
        shell: bash
        run: |
          sudo apt update
          sudo apt install -y gcc g++

      # 3. Install Netcat (nc) for listening checks
      - name: Install Netcat
        shell: bash
        run: |
          sudo apt-get install -y netcat-openbsd

      # 4. Setup Python environment
      - name: Setup Python
        uses: actions/setup-python@5db1cf9a59fb97c40a68accab29236f0da7e94db
        with:
          python-version: '3.12'  # Use a stable version

      - name: Install Python venv
        shell: bash
        run: |
          pip install virtualenv

      # 5. Install CUDA Toolkit
      - name: Install Nvidia Drivers
        shell: bash
        run: |
          wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2404/x86_64/cuda-keyring_1.1-1_all.deb
          sudo dpkg -i cuda-keyring_1.1-1_all.deb
          sudo apt-get update
          sudo apt-get install -y nvidia-open
      
      - name: Install CUDA Toolkit
        uses: Jimver/cuda-toolkit@cbf4e6763f884f59d365961fd170d79a6061d2f1
        with:
          use-github-cache: false

      # 6. Create and activate virtual environment
      - name: Setup Virtual Environment
        shell: bash
        run: |
          chmod +x script/setup
          ./script/setup

      # 7. Start server and test listening
      - name: Start server and test listening
        shell: bash
        run: |
          # Activate the virtual environment
          source .venv/bin/activate

          # Define server URI for testing
          TEST_URI="tcp://127.0.0.1:8080"

          # Define data and download directories
          DATA_DIR="./data"
          DOWNLOAD_DIR="./download"

          # Create necessary directories
          mkdir -p $DATA_DIR
          mkdir -p $DOWNLOAD_DIR

          # Start the server in the background, redirecting output to server.log
          nohup python -m wyoming_whisper_trt.__main__ \
            --model base \
            --uri $TEST_URI \
            --data-dir $DATA_DIR \
            --download-dir $DOWNLOAD_DIR \
            --device cuda \
            --compute-type float16 \
            --beam-size 5 \
            --language auto \
            > server.log 2>&1 &
        
          # Capture the server's Process ID (PID)
          SERVER_PID=$!
          echo "Started Whisper TRT server with PID $SERVER_PID"

          # Function to check if the server is listening on port 8080
          function is_server_listening() {
            nc -z localhost 8080
          }

          # Initialize timeout parameters
          TIMEOUT=600      # Maximum time to wait for the server to start (in seconds)
          INTERVAL=10      # Interval between each check (in seconds)
          ELAPSED=0

          # Loop to check if the server is listening
          while ! is_server_listening; do
            if [ $ELAPSED -ge $TIMEOUT ]; then
              echo "Server failed to start within $TIMEOUT seconds."
              kill $SERVER_PID
              exit 1  # Exit with failure
            fi
            echo "Waiting for server to start... ($ELAPSED/$TIMEOUT seconds elapsed)"
            sleep $INTERVAL
            ELAPSED=$((ELAPSED + INTERVAL))
          done

          echo "Server is successfully listening on port 8080."

          # Terminate the server gracefully
          kill $SERVER_PID
          wait $SERVER_PID 2>/dev/null || true

          # Exit the step with success
          exit 0

      # 8. Upload server logs (always upload logs regardless of success or failure)
      - name: Upload server logs
        uses: actions/upload-artifact@6027e3dd177782cd8ab9af838c04fd81a07f1d47
        with:
          name: server-logs
          path: server.log
        if: always()  # This ensures the step runs even if previous steps fail
